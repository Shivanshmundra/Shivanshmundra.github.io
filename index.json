[{"authors":["admin"],"categories":null,"content":"Hello! My name is Shivansh Mundra. I am a pre-final year undergraduate student at Indian Institute of Technology, Kharagpur.\nExtrovert who is in love with Mathematics, Machine Learning and Philosophies ❤️.\nI usually waste my time thinking ideas that could impact mass and try to build upon those. But often ending up watching Netflix because optimistic nihilism.\nIf you have anything to discuss about Artificial Intelligence, Books, Badminton, Computer Science, shoot a mail. You won\u0026rsquo;t regret!.\n I am not who I think I am. I am not who you think I am. I am who I think you think I am.\n ","date":1597740866,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1597740866,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://shivanshmundra.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Hello! My name is Shivansh Mundra. I am a pre-final year undergraduate student at Indian Institute of Technology, Kharagpur.\nExtrovert who is in love with Mathematics, Machine Learning and Philosophies ❤️.","tags":null,"title":"Shivansh Mundra","type":"authors"},{"authors":["Shivansh Mundra"],"categories":["Artificial Intelligence","Technical"],"content":"Variational Mixture-of-Experts Autoencoders for Multi Modal Deep Generative Models Intro They characterize successful learning of such models as fulfilment of four criteria - i) implicit latent decomposition into shared and private subspaces, ii) coherent joint generation over all modalities, iii) coherent cross-generation across individual modalities, and iv) improved model learning for individual modalities through multi-modal integration.\nWhen we take all modalities(visual, linguistic and physical) into account, we can get a better understanding and representation of context, for ex. here bird.\n Latent Factorization - There is some shared and private spaces across different modalities. Joint Generation - From union of both spaces we could generate different modalities. Basically, for example, text and image should be semantically same. Cross Generation - Model can generate data in one modality conditioned on some other modality. For ex. From text, generate an image. Synergy - Observing both modalities should enhance context understanding. For example observing image and text should improve in specificity of generation of image and text when taken alone.  Related Works There has been some work in the area of joint representations for example\nSuzuki et al. (2017) introduced the joint multimodal VAE (JMVAE) that learns shared representation with joint encoder qΦ(z | x1, x2). To handle missing data at test time, two unimodal encoders qΦ(z | x1) and qΦ(z | x2) are trained to match qΦ(z | x1, x2) with a KL constraint between them.\nHowever, they only focuses on one way transformation that too image-to-image and often require additional modelling components.\nMore recently, Wu and Goodman (2018) introduced Product of Experts(PoE) over marginal posteriors, enabling cross model generations at test time without requiring additional inference networks and multi-stage training regimes.\nSome Mathematics We denote modalities with m = 1,2,3\u0026hellip;\u0026hellip;M and latent representation as z.\nVAE is of form : VAEs are parametrized by $\\theta$ which is deep neural network.\nThe objective of training VAEs is to maximise the marginal likelihood of the data pΘ(x1:M). However, computing the evidence is intractable as it requires knowledge of the true joint posterior pΘ(z | x1:M). To tackle this, we approximate the true unknown posterior by a variational posterior qΦ(z | x1:M), which now allows optimising an evidence lower bound (ELBO) through stochastic gradient descent (SGD), with ELBO defined as\nThey further used IWAE estimator to get a tighter bound and higher entropy.\nHere too, we are facing one issue, how to get joint posterior q$\\phi$? One basic way is get a single encoder that takes all modalities as input. But that would mean, we need all modalities present at test time which won\u0026rsquo;t be true for cross modal generation.\nSo instead they propose to factorise joint variational posterior as a combination of unimodal posteriors(weighted sum) :\n When using Product-of-Experts, any one modality hold the power of veto.\n For better understanding of VAEs both from Neural Network and probabilistic perspective, you can follow these links:\n https://ermongroup.github.io/cs228-notes/inference/variational/ https://www.cse.iitk.ac.in/users/piyush/courses/tpmi_winter19/readings/VI_Review.pdf https://jaan.io/what-is-variational-autoencoder-vae-tutorial/  Results As this is a new idea and theory based paper, they have done experiments on MNIST-SVHN data and Caltech Bird dataset(challenging). You can view results here on all four characteristics mentioned above.\n","date":1597740866,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597740866,"objectID":"f9c0594c9c1cf94465fbc7c31a8545b1","permalink":"https://shivanshmundra.github.io/paper_summary/mmvae/","publishdate":"2020-08-18T14:24:26+05:30","relpermalink":"/paper_summary/mmvae/","section":"paper_summary","summary":"Why we have different representation for different domain, why can't we have shared or single representation of all modalities like image, text and speech. This paper is a baby step in this direction. Variational Auto Encoders for Multi Modal Generative Network.","tags":["GAN","CNN","AutoEncoders","Multimodal","NLP","AGI"],"title":"Multi Modal Variational AutoEncoders","type":"paper_summary"},{"authors":["Shivansh Mundra"],"categories":["Artificial Intelligence","Technical"],"content":" Paper Link\nGeneralisation in Machine Learning Models In Supervised Machine Learning, we train the model on training set and evaluate the model on a validation/testing set which is unseen during the training process. It is assumed that the data distribution is same for training and testing set.\nSo, basically our goal for a good Machine Learning model is to generalise well from training data to any data from the problem domain.\ngeneralisation refers to how well a machine learning model learns and generalises to a new data avoiding Over-fitting and Under-fitting.\ngeneralisation Error refers to difference between Training error and Testing error. Increases with over fitting.\nKey Findings from Paper As of now, we understand that if a model is big(large parameter space), it tries to over-fit training data and we need explicit regularisation(l2 norm on parameters, data augmentations, weight decay, Early Stopping) to decrease Generalisation error. But this paper has shown that SOTA image classification models easily fit on random labelling of training data or even when true pixels are replaced by random pixels. This process is unaffected by explicit regularisation.\nBy their experiments, they show that if size of Deep Neural Networks is greater than sample size(which usually happens), Neural Networks are able to capture meaningful signal in the data, while at the same time fit the noisy part using brute-force. This is also unaffected by hyper-parameter tuning, same set of hyper-parameters converges for noisy labelled data too.\nEffective Capacity of Neural Network They have shown with their experiments that generalisation error not only depend on explicit regularisation and optimizer but on model architectures as well.\nAlso, random noisy image pixels are easy to over-fit compared to true images as random images are well separated in pixel space than original one.\nTraditional bound for Generalization Theoretically, we have VC dimension and Rademacher complexity to measure capacity of Classification model. But authors from their results showed that regularisation bound achieved theoretically is of no use in realistic settings.\nSimilar is the case with evaluation of robustness of training algorithms. Namely Uniform Stability, which doesn\u0026rsquo;t take data into account just algorithm and it\u0026rsquo;s difficult to utilise this stability notion.\nFinally Role of Regularisation With experimenting on different architectures on namely 3 explicit regularisation - data augmentation, weight decay and Dropout authors concluded that:\n Regularisation is important, but we can achieve more by just changing the architecture of model. Regularises are not only responsible for generalisation capacity of deep nets. Early Stopping could potentially improve generalisation performance. Batch Norm give marginal gains on generalisation error. Model could perform well even after regularises are removed.  Expressive Power of NNs Authors chose a different approach than traditional approach of showing what functions of entire domain can or can\u0026rsquo;t be represented. They show expressive power on a finite sample of size $n$.\nIn their words, \u0026ldquo;There exists a two-layer neural network with ReLU activation and $2n+d$ weights that can represent any function on a sample of size $n$ in $d$ dimensions\u0026rdquo;\nImplicit Regularisation They have theoretically shown that in linear models, SGD often converge to solution with minimum norm. And minimum norm doesn\u0026rsquo;t predict anything about generalisation performance.\nDoing simple tricks like preprocessing with some conv layers, gaussian kernels on pixels improve generalisation error which pose serious questions on traditional generalisation understanding.\n\u0026ldquo;This shows that the reasons for why optimization is empirically easy must be different from the true cause of generalisation\u0026rdquo;\n","date":1592797550,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1592797550,"objectID":"ce20477a0ec6faf6f4b9c2052e7a12d4","permalink":"https://shivanshmundra.github.io/paper_summary/rethinking_generalisation/","publishdate":"2020-06-22T09:15:50+05:30","relpermalink":"/paper_summary/rethinking_generalisation/","section":"paper_summary","summary":"Paper Link\nGeneralisation in Machine Learning Models In Supervised Machine Learning, we train the model on training set and evaluate the model on a validation/testing set which is unseen during the training process.","tags":["Machine Learning","Optimization","Computer Vision"],"title":"Understanding Deep Learning requires Re-Thinking Generalisation","type":"paper_summary"},{"authors":["Shivansh Mundra"],"categories":["Artificial Intelligence","Technical"],"content":"Problem Statement The problem statement is to segment out visual object from natural language query. Semantics of that visual object are defined from NLP query. For ex. Man in pink shirt in some image, we want to segment out corresponding region where any/all man is wearing pink shirt.\nRelated Works and Inspiration Right now this problem is addressed in academia by extracting out image features separately from Deep Convolution Neural Network and language features from LSTM cells. These features are then concatenated together to form a fused representation of image and query. This fused representation is somehow used to predict corresponding segmented region with trivial loss function.\nWhat authors feel is we, human don\u0026rsquo;t perceive things is similar manner like LSTM, we don\u0026rsquo;t remember everything after the last loop over word embeddings. In author words:\n For example, consider the expression “the man on the right wearing blue”. Without seeing an actual image, all information in the sentence needs to be remembered, meaning the sentence embedding needs to encode IS MAN, ON RIGHT, WEAR BLUE jointly. However, with the actual image available, the reasoning process can be decomposed as a sequential process, where the model first identifies all pixels that agree with IS MAN, then prunes out those that do not correspond with ON RIGHT, and finally suppresses those that do not agree with WEAR BLUE.\n This task is also similar to visual question answering task where you need to generate answer(NLP) based on an image and a question. The difference only is, in VQA, we need sequence generation(in answer) while here we need to produce segmentation mask at once.\nAuthors achieve this by applying LSTM in a convolution manner.\nKey Contributions   We propose a novel model, namely convolutional multimodal LSTM, to encode the sequential interactions between individual semantic, visual, and spatial information. We demonstrate the superior performance of the word to-image multimodal LSTM approach on benchmark datasets over the baseline model. We analyze the intermediate output of the proposed multimodal LSTM approach and empirically explain how this approach enforces a more effective word-toimage interaction.   Basically they want to convert this referring image segmentation into an sequential process.\nModel Here concatenation of visual features and spatial features with language features is fed to mLSTM cell as an input and mLSTM cell produces an output for same. SInce mLSTM receives multimodal data, we can understand this as a 1x1 convolution applied to fused features .\n The same mLSTM operation is shared for all image locations. This is equivalent to treating the mLSTM as a 1×1 convolution over the feature map of size W 0 × H0 × (DI + DS + 8). In other words, this is a convolutional LSTM that shares weights both across spatial location and time step.\n Results My Takeaways   This idea of treating this problem as sequential problem is innovative and having an mLSTM cell to encode both visual and linguistic features is also good. This gives model ability to forget all those pixel which defy correspondence initially.\n  My guts are that this kind of model would work good even where there are small objects because at each time step there would be a reduction/change of probable pixels for segmentation.\n  I still believe that this essentially is fusing of features from image and language just more diffused!\n  I want to study good papers on VQA as they can provide me with good literature and insights on this task.\n  ","date":1588099664,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588099664,"objectID":"7bb0fc3b61251f78fbcd6823dad5c536","permalink":"https://shivanshmundra.github.io/paper_summary/recurrent_multimodal/","publishdate":"2020-04-29T00:17:44+05:30","relpermalink":"/paper_summary/recurrent_multimodal/","section":"paper_summary","summary":"This idea of treating this problem as sequential problem is innovative and having an mLSTM cell to encode both visual and linguistic features is also good. This gives model ability to forget all those pixel which defy correspondence initially. My guts are that this kind of model would work good even where there are small objects because at each time step there would be a reduction/change of probable pixels for segmentation.","tags":["NLP","CNN","Segmentation","LSTM","Multimodal"],"title":"Recurrent Multimodal Interaction for Referring Image Segmentation","type":"paper_summary"},{"authors":["Shivansh Mundra"],"categories":["Technical","Artificial Intelligence"],"content":"Natural Language Processing I consider the reader to be familiar with normal machine learning terminology and methods. We here are going to deal with Supervised learning mostly.\nSince all machine learning models are mathematical function approximators, we can;t input a sentence to a mathematical model!\nThere is nothing like f('I am here to learn NLP'), one need to convert from our language to machine language so that it becomes something like f([1, 0, 1, 2, 5 ..]), since this is the method computer is most familiar with. So first jumping to this conversion:\nConversion of text to mathematical representation 1. Basic Approach of making dictionary Here you just create a dictionary or set of all available words present in data and represent each word/sentence with one hot vector. For example : Let\u0026rsquo;s say we have 8 words in our dictionary and sentence I like banana is to be encoded, it would be something like [1,0,0,0,1,0,0,1] where index representing I, like and Banana. In this case, length of this vector would be fixed and equal to vocabulary of data.\nIn this case, there is no sense of context here, like can be used in different context yet same representation. But duh! It\u0026rsquo;s the first method and supposed to be this dumb!\n2. TF-IDF Representation Full form is : Term Frequency-Inverse Document Frequency . The full form mentioned is self explanatory still we would want to get a feel. So here it is:\nTerm-Frequency representation means number of times a word is occurring and represent in one hot vector by it\u0026rsquo;s frequency for ex [1,2,0,0,3]. Now in this case, let\u0026rsquo;s say there is a common word the which is occurring in most of corpus(another name for sentence!) but adds no specific meaning to understanding. So we take TF representation and multiply it with IDF which is $log(N/nw)$ where N is total number of document/corpus and nw is number of corpus which contain that word. Smart thinking!\nWe won\u0026rsquo;t use this in our supervised learning paradigm, we would just go with one hot vector and prepare embedding for our model.\nTerminologies  Corpus(singular- Corpura) : A sentence or document in general consisting of words. Tokenization: Splitting a corpus based on white spaces(in general) in between(for English specifically).  Say a sentence I want to learn Tokenization :-) is to be tokenized. Tokenization would be ['I', 'want', 'to', 'learn', 'Tokenization', ':-)'] There are several libraries which use context and tokenize the corpus.   N-gram tokens: Taking consecutive n tokens from tokenized representation in contiguous manner. POS Tagging: Categorising tokens to parts of speech. Dependency Parsing: Extracting relationship/dependency between different tokens in sentence.  Workflow of NLP Pipeline In every NLP data, there are three main components:\nThe Vocabulary: We want a bijection mapping where we map tokens to mathematical integers. We create a dictionary mapping tokens to indexes. This would also contain index to token mapping.\nThe Vectorizer: This method produces vectors from text/corpus using vocabulary above.\nThe Dataloader: Traditional data science batchloader which yield data points in rolling fashion.\n","date":1587796179,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587796179,"objectID":"ad79034ba603873a5e540fde7ce82cb4","permalink":"https://shivanshmundra.github.io/paper_summary/intro_nlp/","publishdate":"2020-04-25T11:59:39+05:30","relpermalink":"/paper_summary/intro_nlp/","section":"paper_summary","summary":"Natural Language Processing I consider the reader to be familiar with normal machine learning terminology and methods. We here are going to deal with Supervised learning mostly.\nSince all machine learning models are mathematical function approximators, we can;t input a sentence to a mathematical model!","tags":["NLP","PyTorch"],"title":"My Journey to Natural Language Processing","type":"paper_summary"},{"authors":["Shivansh Mundra"],"categories":["Technical","Artificial Intelligence"],"content":" Paper Link\nPrevious Works and Inspiration   While Inception modules are conceptually similar to convolutions, the empirically appear to be capable of learning richer representations with less parameters.\n  A convolution layer attempts to learn filters in a 3D space, with 2 spatial dimensions (width and height) and a channel dimension; thus a single convolution kernel is tasked with simultaneously mapping cross-channel correlations and spatial correlations.\n  In Inception module, we introduce 1x1 convolutions instead of 3 or 5 to extract fewer channels and focus on spatial information. After that mapping all correlations in these smaller 3D spaces.\n  In theory, cross channel correlations and spatial correlations are decoupled in Inception module.\n  Separable Convolution Layer So essentially the idea of inception of separating cross channel mapping and spatial mapping was already there as a layer in Tensorflow as \u0026ldquo;Separable Conv\u0026rdquo; Layer.\nMain difference between this and Inception version is :\n  The order of the operations: depthwise separable convolutions as usually implemented (e.g. in TensorFlow) perform first channel-wise spatial convolution and then perform 1x1 convolution, whereas Inception performs the 1x1 convolution first.(doesn\u0026rsquo;t have a difference as both are stacked)\n  The presence or absence of a non-linearity after the first operation. In Inception, both operations are followed by a ReLU non-linearity, however depthwise separable convolutions are usually implemented without non-linearities.\n  Key Contributions  Author say that we can totally decouple cross channel correlations and spatial correlations in the feature maps of convolution neural network. Parameters are almost same in Inception and Xception model while Xception outperforms by a large margin on a dataset with large number of classes(17k).   Rest all things are same, just replacing inception module by depthwise separable conv layer block also making the architecture simple.  Takeaway Idea of decoupling of channel dimension and spatial feature mapping from convolution kernel is great! So deciphering it mathematically:\nWe know each channel in Convolution block represents some high level feature say in human, each channel would map a body part(just for example!). Then this idea of depthwise conv proposes that in process of identifying one body part don\u0026rsquo;t process info from other body part info, it would disturb the signal in processing.\nAfter we get good signal info body part, then we can use info from others to get high level part info.\n","date":1587570578,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587570578,"objectID":"5cdf25aee69efd5114e3de37cd731cc1","permalink":"https://shivanshmundra.github.io/paper_summary/xceptionnet/","publishdate":"2020-04-22T21:19:38+05:30","relpermalink":"/paper_summary/xceptionnet/","section":"paper_summary","summary":"We know each channel in Convolution block represents some high level feature say in human, each channel would map a body part(just for example!). Then this idea of  depthwise conv proposes that in process of identifying one body part don't process info from other body part info, it would disturb the signal in processing.","tags":["CNN","ImageNet"],"title":"Xception: Deep Learning with Depthwise Separable Convolutions","type":"paper_summary"},{"authors":["Shivansh Mundra"],"categories":["Technical","Artificial Intelligence"],"content":"Jude is an amateur football player but a wannabe great player. Jude is a die-hard fan of Christiano Ronaldo and watches every time he is playing anywhere.\nJude wondered if he could exactly be like Ronaldo. If by humongous practice, he could imitate all skills Ronaldo has. He doesn\u0026rsquo;t care that while imitating if he is scoring a goal or not, he would just kick as Ronaldo would have kicked.\n If I would kick exactly like Ronaldo, it would definitely be a goal!\n Jude was fascinated by this idea, but also he was too lazy and loved programming(eternal bond). He thought why couldn’t he do something very similar in the virtual world, after all, he could fast forward this training process as he controls this virtual world.\nJude stumbled upon exactly what he was looking for\nImitation Learning Continuing Jude\u0026rsquo;s story, as he watches Ronaldo a lot, he knows what he would do in numerous situations thrown at him. Let’s say Jude has practised and can mimic exactly Ronaldo in those exactly the same situations.\nAs the number of situations Ronaldo(or any football player) can be in is infinite, Jude can’t learn on all of them, how hard he tries! And since Jude was so busy in replicating Ronaldo, he didn’t learn anything when an unknown situation arises.\nAlso, since Jude is human just like us, there is nothing like exactly like Ronaldo. However hard he try, there would be some scope of mistake every time!\nWe would see above circumstances projected mathematically later.\n We can be wrong, or we can know it, but we can’t do both at the same time\n If you understood Jude, you got Imitation learning. 😄\nDifferent Learning Paradigms Let us quickly define three verticals of machine learning which would help define our problem statement.\n Supervised learning: Basically Find xs and ys, define a model and fit model to predict ys. Unsupervised learning: We wish to inherently learn the structure of data without explicitly using labels. Reinforcement learning: It\u0026rsquo;s about taking suitable actions in order to maximize reward in an environment.  Now Why Imitation Learning? Now consider that Jude won\u0026rsquo;t use Imitation learning as of now and want to train himself for every situation with objective being shooting a goal using Reinforcement learning.\nIn RL setting, reward for shooting a goal would be +1 and for rest it would be 0. As you know, this kind of reward is very sparse in nature. There may be handful of time where agent(Jude in our case!) would receive a positive reward to learn from.\n The reward sparsity is one of the issues that hinders us in beating Montezuma’s Revenge — a notoriously hard Atari 2600 game, that has not been cracked yet.\n Another issue is one we discussed above, we need virtual simulators to fasten this process of learning but what if we don\u0026rsquo;t have one or we want to learn something in real life?\nImitation learning can potentially solve these problems and also a bunch of others.\n  Virtual Humanoid trying to imitate Human in running   How Imitation learning? Generally, Imitation learning is useful when it is easier for an expert to demonstrate the desired behaviour so that we don\u0026rsquo;t have to specify any reward function.\nLet\u0026rsquo;s say we collect expert demonstrations (also known as trajectories in RL setting)\n$\\tau$ = (s0, a0, s1, a1\u0026hellip;..) where actions (As) are based on expert\u0026rsquo;s policy(say human brain). In some cases, we may require presence of \u0026ldquo;expert\u0026rdquo; during training.\nOnce we get this trajectory, we slice this on each time step to get pairs of Ss and As.\nWe then treat these pairs as i.i.d examples and apply Supervised learning.\nChanging loss function and optimisation strategies in this learning define various imitation learning algorithms. Let\u0026rsquo;s look at basic ones in them.\nBehaviour Cloning This is simplest form of imitation learning where you treat these pairs(Ss, As) as i.i.d examples and apply simple supervised learning. We can choose the model to a tree based (Random Forest, Gradient Boosting) or Neural Networks depending on complexity of state and action space.\nEnough of talks, let\u0026rsquo;s see implementation! You can head over to this folder : https://github.com/Shivanshmundra/reinforcement_learning_beginner/tree/master/imitation_learning_bc\nHere, you can run expert_recorder.py to record expert demonstrations, expert being you!. Right now it uses MountainCar-v0 environment where you have only 2 actions - right or left, to climb a mountain. You can guide by using a and d for right and left respectively. You can change environment according to your ease too!\nOnce you have created \u0026ldquo;expert demonstrations\u0026rdquo;, you can build a model and train on collected data. Trained policy then can be used to test on same environment.\nExtensive instructions are in README of folder. Also, I have borrowed this code, so to get good understanding of code, you can watch this video.\nOnce trained, it looks something like this:\n  Mountain Car trained using Behaviour Cloning   Shortcomings In some cases, Behavioural cloning can work excellently, precisely where there are limited number of states and time frame of an episode is very short.\nMain reason for Behaviour cloning to not work generally is the i.i.d assumption we took above for supervised learning, while in real scenario like an MDP(Markov Decision Process) an action induces the next state, which breaks i.i.d assumption.\nAlso, as you know this algorithms is only trained on given states as we previously talked that no machine learning algorithm is 100% accurate, there is a chance of error on some time step $t$ and this error will keep on increasing with $t$ as with every wrong decision, agent might fall into an \u0026ldquo;more unknown\u0026rdquo; state thus prone to make more error.\nIn above cases, BC behaviour is undefined and can lead to catastrophic failures.\n​\tSource : https://web.stanford.edu/class/cs234/slides/lecture7.pdf\nDAgger (Dataset Aggregation) Algorithm This is basically an improved version of Behaviour cloning algorithms we discussed above.\nPrimary shortcoming of BC was that the data it had for training was static and agent could lead to unknown states where it doesn\u0026rsquo;t have expert demonstrations.\nWe could improve that by keeping expert in loop of training and querying expert in each loop to collect more data.\nstateDiagram Expert_labelling_new_data --\u0026gt; Policy_learning_from_new_data Policy_learning_from_new_data --\u0026gt; Sampling_data_from_learned_policy Sampling_data_from_learned_policy --\u0026gt; Expert_labelling_new_data  The DAgger algorithms works as follows:\n Initial policy: $\\pi$ 0 For m = 1:  Collect trajectories $\\tau$ sampled from policy $\\pi$m-1 Estimate state distribution by discarding actions from $\\tau$. Ask expert to label/feedback on those states interactively. Creating union of data collected till now $\\tau$1,2,\u0026hellip;m Training $\\pi$ on this union of data    DAgger is very efficient method, which doesn\u0026rsquo;t have shortcomings of Behaviour cloning algorithm. The only limitation of this method is the fact, that we need an expert that can evaluate the agent’s actions at all times, which is not possible in some applications.\nLet\u0026rsquo;s see implementation of DAgger I have used code from Sergey Levine\u0026rsquo;s CS285 Deep Reinforcement Learning course material. If you want to dive deep into Deep Reinforcement learning, it\u0026rsquo;s a gold mine!\nHead over to my github repository - https://github.com/Shivanshmundra/CS285-DeepRL-Solutions/tree/master/hw1 for DAgger implementation on different gym environments.\nIn this solution, instead of human expert labelling state space, we have an expert policy which when queried, induce actions on given states. You can see with every iteration of Data Aggregation, episodic reward increases and agent approach towards convergence.\nThis repository also contain implementation of Behaviour cloning to compare between BC and DAgger algorithm.\nSome of trained policies on different environments:\n  Ant-v2 Environment     Hopper-v2 Environment     Humanoid-v2 Environment   In all above simulations, on the left is trained policy using DAgger algorithm and on right is expert policy which was used during training.\n Other Algorithms All algorithms explained above are cateegorised as \u0026ldquo;basic\u0026rdquo; algorithms in Imitation learning. There are several other algorithms to discuss but I haven\u0026rsquo;t understood them completely.\nSome of them are:\n  Inverse Reinforcement Learning(IRL) :\n Learns the reward function from expert trajectories, then derives optimal policy. It\u0026rsquo;s very expensive to run. Indirectly learns optimal policy from reward function.    Generative Adversarial Imitation Learning(GAIL) :\n It learns the policy, not the reward function from data. Sometimes, it\u0026rsquo;s better than \u0026ldquo;expert\u0026rdquo; policy. Idea is inspired from Generative Adversarial Networks, where we need to approximate ground truth probability distribution. Here we need to approximate \u0026ldquo;expert\u0026rdquo; state-action distribution. The goal is to find a policy pi-theta such that the discriminator cannot distinguish between states following the pi-theta as opposed to those from pi-expert.     So this was a detour of Imitation Learning, Hope you found it insightful! I would love to hear feedback, if any. ❤️\n References  https://medium.com/@SmartLabAI/a-brief-overview-of-imitation-learning-8a8a75c44a9c http://rail.eecs.berkeley.edu/deeprlcourse/ https://github.com/Shivanshmundra/CS285-DeepRL-Solutions/tree/master/hw1 https://hollygrimm.com/rl_gail https://medium.com/@sanketgujar95/generative-adversarial-imitation-learning-266f45634e60 https://medium.com/@jonathan_hui/rl-imitation-learning-ac28116c02fc  ","date":1587242734,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587242734,"objectID":"43b9f45224c6704bf83f28da5a71b5a8","permalink":"https://shivanshmundra.github.io/post/imitation_learning/","publishdate":"2020-04-19T02:15:34+05:30","relpermalink":"/post/imitation_learning/","section":"post","summary":"Jude is an amateur football player but a wannabe great player. Jude is a die-hard fan of Christiano Ronaldo and watches every time he is playing anywhere.\nJude wondered if he could exactly be like Ronaldo.","tags":["Reinforcement Learning","Imitation Learning","Machine Learning","GAN","Behaviour Cloning"],"title":"Intro to Imitation Learning: From Why to How!","type":"post"},{"authors":["Shivansh Mundra"],"categories":["Technical"],"content":"What is Multi-Label classification? Think of a recent article/tweet you read and if you were asked to tag it!\nProbably you will come up with tags such as technology, politics, fashion, etc. Consider this tweet and try this on your own.\nIt can be tagged with self-help, musings, 3 am thoughts! and many others. One can’t say that one is best amongst them. Each one of them is right, you just need a perspective!\nOne tag may be more appropriate than others, but you can’t have just one tag. We will get back to this afterwards.\nNow problems like this arise often in our lives, some more examples are:\n Labelling an image based on its content : (sky, house, grass) Genre classification of a movie: (action, adventure, crime) Tagging a question asked in Stack Overflow.  So what’s the difference between Multi-Class and Multi-Label Classification? When there are multiple categories but each instance is assigned only one of those categories or classes are mutually exclusive, it’s multi-class classification.\nWhen each instance can be assigned multiple categories or classes are related to each other, it’s multi-label classification.\nStandard practices to solve Multi-Label classification problem Scikit-Learn has provided a separate library Scikit-Multilabel for multi-label classification. I won’t go into details of standard algorithms provided by this library like that would distract from the objective of this blog.\nYou can have a look at following articles to get handy with this library:\n https://www.analyticsvidhya.com/blog/2017/08/introduction-to-multi-label-classification/ http://scikit.ml/multilabeldnn.html DL based multi-label classification https://towardsdatascience.com/journey-to-the-center-of-multi-label-classification-384c40229bff  What is Vowpal Wabbit and why do we need it here? It’s a library developed by Microsoft Research (previously by Yahoo Inc.) to solve machine learning problems.\n Vowpal Wabbit provides a fast, flexible, online, and active learning solution that empowers you to solve complex interactive machine learning problems.\n From what I have experienced, two things set apart this library speed and online learning.\n In computer science, online machine learning is a method of machine learning in which data becomes available in a sequential order and is used to update our best predictor for future data at each step, as opposed to batch learning techniques which generate the best predictor by learning on the entire training data set at once.\n Let\u0026rsquo;s dive into our problem To get a better understanding of Vowpal Wabbit and multi-label classification, let’s unwind the problem of assigning tags to a short textual description.\nWe will use the Bibtex dataset from the Extreme Classification Library which has 1836 binary features and 159 possible labels for a single text.\n Code for Multi-Label classification using Vowpal Wabbit\nFor an extensive view, you can head over to the [Github Link](https://github.com/Shivanshmundra/Contextual_Bandits_VowpalWabbit/blob/master/Cost-Sensitive Multilabel Classification .ipynb).\nAs you might have seen, just iterating over each example once, that too in an online fashion and in blazing speed, model converged to good accuracy.\nLet’s understand the algorithm used here(Please read code before going next).\nCost-Sensitive Multiclass Classification Here, instead of just having one correct label (and all others incorrect), you can have different costs for each of the K different labels. And you can also have different “allowable” labels for each example. An identical cost-sensitive training set to that above is:\n1. 1:0 2:1 3:1 4:1 | a b c 2. 1:1 2:1 3:0 4:1 | b c d  The first line means that label 1 has a cost of zero and labels 2, 3 and 4 all have a cost of one. “a, b, c” are binary features associated with example. You can just state features that are present and ignore which are not.\nInternally, csoaa does something different than you might expect. This problem is reduced to the regression problem. If there are K possible labels, it constructs K regression problems, where the input is a (label-based) version of the features and the output is the cost of that label.\nAnd then at test time, the label whose regressor gives the lowest value (predicted cost) is chosen.\n The objective of this blog was not to find ways to increase accuracy but to introduce this different world of Machine Learning(multi-label classification) and how to efficiently use Vowpal Wabbit to solve it.\nThere are many modifications/improvements possible in the above solution for example: changing loss function, number of passes over data, optimizing strategy, changing cost for each label, etc.\nFor more information, you can head over to links below:\n  http://users.umiacs.umd.edu/~hal/tmp/multiclassVW.html  https://github.com/VowpalWabbit/vowpal_wabbit/wiki/Cost-Sensitive-One-Against-All-(csoaa)-multi-class-example  http://manikvarma.org/downloads/XC/XMLRepository.html  https://vaillab.blogspot.com/2014/06/mutlti-label-classification-using.html  Any doubts or suggestions feel free to ping me 😃. Also, find me on Twitter and Linkedin. Adios!!\n","date":1587054083,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587054083,"objectID":"e27f5506ba4a7b31fc42bcd681b0436f","permalink":"https://shivanshmundra.github.io/post/multilabel/","publishdate":"2020-04-16T21:51:23+05:30","relpermalink":"/post/multilabel/","section":"post","summary":"What is Multi-Label classification? Think of a recent article/tweet you read and if you were asked to tag it!\nProbably you will come up with tags such as technology, politics, fashion, etc.","tags":["Machine Learning","Classification"],"title":"Multi Label Classification using Vowpal Wabbit library: From Why to How","type":"post"}]